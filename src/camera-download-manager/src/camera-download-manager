#!/usr/bin/env python
# -*- coding: utf-8 -*-

import calendar
import fnmatch
import os
import re
import subprocess
import sys
from datetime import datetime
from operator import attrgetter
import exifread

"""
  camera-procedures - scripts suite dedicated to camera preparation.

  Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
  Please read <http://foxel.ch/license> for more information.


  Author(s):

       Kevin Velickovic <k.velickovic@foxel.ch>


  This file is part of the FOXEL project <http://foxel.ch>.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.


  Additional Terms:

       You are required to preserve legal notices and author attributions in
       that material or in the Appropriate Legal Notices displayed by works
       containing it.

       You are required to attribute the work as explained in the "Usage and
       Attribution" section of <http://foxel.ch/license>.
"""

# Config
CONFIG_SOURCE_DIR      = "/data/footage"
CONFIG_DOWNLOAD_DIR    = "/data/download"
CONFIG_BACKUP_DIR      = "/data/backup"
CONFIG_BACKUP_FAIL_DIR = "/data/backup_fail"
CONFIG_DEST_SSH_HOST   = "foxel@192.168.0.69"
CONFIG_SELF_SSH_HOST   = "foxel@192.168.0.50"
CONFIG_MOUNTPOINT      = "/foxel/mnt/zfs/data/test_structure"

# Function to print debug messages
def ShowMessage(Message, Type=0, Halt=0):

    # Color local setting
    NO_COLORS = 0

    # Flush stdout
    sys.stdout.flush()

    # Get current date
    DateNow = datetime.now().strftime("%H:%M:%S")

    # Get script name
    scriptName = "%s :" % os.path.basename(__file__)

    # Display proper message
    if Type == 0:
        if NO_COLORS:
            sys.stderr.write("[%s] [INFO] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s] \033[32m[INFO]\033[39m %s %s\n" % (DateNow, scriptName, Message))
    elif Type == 1:
        if NO_COLORS:
            sys.stderr.write("[%s] [WARNING] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s] \033[33m[WARNING]\033[39m %s %s\n" % (DateNow, scriptName, Message))
    elif Type == 2:
        if NO_COLORS:
            sys.stderr.write("[%s] [ERROR] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s] \033[31m[ERROR]\033[39m %s %s\n" % (DateNow, scriptName, Message))
    elif Type == 3:
        if NO_COLORS:
            sys.stderr.write("[%s] [DEBUG] %s %s\n" % (DateNow, scriptName, Message))
        else:
            sys.stderr.write("[%s] \033[34m[DEBUG]\033[39m %s %s\n" % (DateNow, scriptName, Message))

    # Flush stdout
    sys.stdout.flush()

    # Halt program if requested
    if Halt:
        sys.exit()

# Function to execute a system command
def execCommand(command):

    # Execute command
    return subprocess.call(command, shell=True)

# Function to recursively find files
def find_files(directory, pattern):
    for root, dirs, files in os.walk(directory):
        for basename in files:
            if fnmatch.fnmatch(basename, pattern):
                filename = os.path.join(root, basename)
                yield filename

# Function to validate EXIF data contents
def ValidateEXIFData(EXIFData):

    # Check if EXIF data is present
    if not EXIFData:
        return False

    # Verify micro timestamp entry presence
    if 'EXIF SubSecTimeOriginal' in EXIFData:

        # Verify micro timestamp
        if not str( EXIFData["EXIF SubSecTimeOriginal"] ).isdigit():
            return False
    else:
        return False

    # Verify image date entry presence
    if 'Image DateTime' in EXIFData:

        # Midnight fix
        _DateTime = str(EXIFData["Image DateTime"]).replace('24:00:00', '00:00:00')

        # Verify image date
        _Exp = re.compile(r"^([0-9]+\:[0-9]+\:[0-9]+\s[0-9]+\:[0-9]+\:[0-9]+)$")
        if not _Exp.match( _DateTime ):
            return False

    else:
        return False

    # Return True if all tests passed
    return True

# Function to get camera module from channel
def getModuleFromChannel( data ):

    if "CHN101" in data:
        return 1
    elif "CHN102" in data:
        return 2
    elif "CHN103" in data:
        return 3
    elif "CHN104" in data:
        return 4
    elif "CHN105" in data:
        return 5
    elif "CHN106" in data:
        return 6
    elif "CHN107" in data:
        return 7
    elif "CHN108" in data:
        return 8
    elif "CHN109" in data:
        return 9

# JP4 image container
class JP4_Image:

    # Class initializer
    def __init__( self, path ):

        # Initialize class variables
        self.path = path
        self.valid = True
        EXIF_Tags = None

        # Open input JP4 file
        with open( path, 'r' ) as jp4_file:

            # Read exif tags
            EXIF_Tags = exifread.process_file( jp4_file )

        # Verify EXIF data integrity
        if not ValidateEXIFData( EXIF_Tags ):

            # Debug output
            ShowMessage("Image with corrputed EXIF data %s" % path, 1)

            # Tag image as invalid
            self.valid = False

        else:

            # Extract MAC address
            self.MAC = ("%s" % EXIF_Tags['Image HostComputer']).replace(':', '-').lower()

            # Extract module
            self.module = getModuleFromChannel( "%s" % EXIF_Tags['Image Model'] )

            # Extract timestamp
            _datetime            = str( EXIF_Tags["Image DateTime"] ).replace( '24:00:00', '00:00:00' )
            _date_object         = datetime.strptime( _datetime, '%Y:%m:%d %H:%M:%S' )
            self.timestamp       = calendar.timegm( _date_object.utctimetuple() )
            self.timestamp_micro = int( str( EXIF_Tags["EXIF SubSecTimeOriginal"] ) )
            self.timestamp_full  = ( "%10d_%06d" % ( self.timestamp, self.timestamp_micro ) )

# Function to download snapshoots
def download_snapshots():

    # List JP4 files
    __Jp4_Paths__ = sorted( find_files( CONFIG_SOURCE_DIR, '*.jp4' ) )

    # Contaiers
    __Poses__   = {}
    __Cameras__ = {}

    # Debug output
    ShowMessage("Indexing images...")

    # Iterate over jp4 paths
    for path in __Jp4_Paths__:

        # Create JP4 class entry
        JP4_Item = JP4_Image( path )

        # Check image validity
        if JP4_Item.valid:

            # Check if pose is already initialized
            if not JP4_Item.timestamp_full in __Poses__:

                # Initialize pose
                __Poses__[ JP4_Item.timestamp_full ] = []

            # Insert image in pose
            __Poses__[ JP4_Item.timestamp_full ].append( JP4_Item )

    # Iterate over poses
    for timestamp, poses in __Poses__.iteritems():

        # Sort poses
        __Poses__[ timestamp ] = sorted( poses, key = attrgetter( "module" ) )

        # Retrieve first module
        first_module = __Poses__[ timestamp ][ 0 ]

        # Check if first module is 1
        if( first_module.module != 1 ):

            # Debug output
            ShowMessage("Module 1 missing in pose %s" % first_module.timestamp_full, 2)

            # Iterate over poses
            for p in poses:

                # Move pose to backup_fail folder
                os.system( "mv %s %s/" % ( p.path, CONFIG_BACKUP_FAIL_DIR ) )

        else:

            # Check if camera is already initialized
            if not first_module.MAC in __Cameras__:

                # Initialize pose
                __Cameras__[ first_module.MAC ] = []

            # Iterate over poses
            for p in poses:

                # Append pose
                __Cameras__[ first_module.MAC ].append( p )

            # Sort poses
            __Cameras__[ first_module.MAC ] = sorted( __Cameras__[ first_module.MAC ], key = attrgetter( "timestamp_full" ) )

    # Debug output
    ShowMessage("Found %d pose(s) from %d camera(s)" % ( len( __Poses__ ), len( __Cameras__ ) ))

    # Iterate over camera poses
    for camera, poses in __Cameras__.iteritems():

        # 8h groups vars initialisation
        Masters = {}
        Masters_index = 0

        # Iterate over poses
        for _idx in range( 0, len( poses ) ):

            # Check if master is allocated
            if not Masters_index in Masters:

                # Allocate master
                Masters[ Masters_index ] = []

            # Append pose to master
            Masters[ Masters_index ].append( poses[ _idx ] )

            # Check poses bounds
            if _idx < ( len( poses ) - 1 ):

                # Compute time between current and next pose
                diff = ( poses[ _idx + 1 ].timestamp - poses[ _idx ].timestamp )

                # Check if time is greather than 8h
                if diff > 28800:

                    # New master
                    Masters_index += 1

        # Iterate over masters
        for master_idx, master_poses in Masters.iteritems():

            # Iterate over poses
            for pose in master_poses:

                # Symlink pose to download folder
                os.system( "ln -s %s %s/" % ( pose.path, CONFIG_DOWNLOAD_DIR ) )

            #  Start download
            if execCommand( "ssh %s rawdata-procedures --snapshot --snapshot-host %s --mount-point %s" % ( CONFIG_DEST_SSH_HOST, CONFIG_SELF_SSH_HOST, CONFIG_MOUNTPOINT ) ) == 0:

                # Check if camera backup dir exists
                if not os.path.isdir( "%s/%s" % ( CONFIG_BACKUP_DIR, camera ) ):

                    # Create dir
                    os.makedirs( "%s/%s" % ( CONFIG_BACKUP_DIR, camera ) )

                # Iterate over poses
                for pose in master_poses:

                    # Move pose to backup folder
                    os.system( "mv %s %s/%s -f" % ( pose.path, CONFIG_BACKUP_DIR, camera ) )

                # Remove JP4 symlinks in download folder
                os.system( "rm -f %s/*.jp4" % CONFIG_DOWNLOAD_DIR )

            else:

                # Remove JP4 symlinks in download folder
                os.system( "rm -f %s/*.jp4" % CONFIG_DOWNLOAD_DIR )

                # Return failure
                sys.exit( 1 )

    # Check if fooage folder contains JP4 files
    if len( sorted( find_files( CONFIG_SOURCE_DIR, '*.jp4' ) ) ) == 0:

        # Check if folder is correct
        if "/data/footage" in CONFIG_SOURCE_DIR:

            # Cleanup folder
            os.system( "rm %s/* -rf " % CONFIG_SOURCE_DIR )

    else:

        # Debug output
        ShowMessage("An error has occured, some files was not downloaded", 2)

# Function to download eyesis
def download_eyesis():

    # Start eyesis download
    if execCommand( "ssh %s rawdata-procedures --mount-point %s --download" % ( CONFIG_DEST_SSH_HOST, CONFIG_MOUNTPOINT ) ) == 0:

        # Debug output
        ShowMessage("Success")

    else:

        # Debug output
        ShowMessage("Failed", 2)

# Usage display function
def _usage():
    print """
    Usage: %s [OPTIONS]

    [Optional arguments]
    --snapshot                  Start snapshots download
    --eyesis                    Start eyesis download

    """ % os.path.basename( sys.argv[0] )

# Program entry point function
def main(argv):

    # Parse arguments
    Arguments = {}
    Argv_Concat = ' '.join(argv)
    Argv_Flags = Argv_Concat.split('--')

    # Iterate over source args
    for i in Argv_Flags:

        # Check length
        if len(i) > 0:

            # Split by first space
            splited = i.split(' ', 1)

            # Check if argument contains value
            if len(splited) > 1:
                Arguments[splited[0]] = (None if not splited[1] else splited[1].strip())
            else:
                Arguments[splited[0]] =  None

    # Arguments variables
    __Snapshot__  = (1 if 'snapshot' in Arguments else 0)
    __Eyesis__    = (1 if 'eyesis' in Arguments else 0)
    __Help__      = (1 if 'help' in Arguments else 0)

    # Arguments check
    if ( not __Snapshot__ ) and ( not __Eyesis__ ) or __Help__:
        _usage()
        sys.exit(0)

    # Check snapshot arguemnt
    if __Snapshot__:

        # Download snapshots
        download_snapshots()

    # Check eyesis arguemnt
    if __Eyesis__:

        # Download eyesis
        download_eyesis()

# Program entry point
if __name__ == "__main__":
    main(sys.argv[1:])
